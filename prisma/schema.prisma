generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AdminUser {
  id         String   @id @default(cuid())
  email      String   @unique
  password   String
  name       String
  role       String   @default("user") // admin, user
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations for Permission Letters
  created_permission_letters PermissionLetter[] @relation("PermissionCreatedBy")
  approved_permission_letters PermissionLetter[] @relation("PermissionApprovedBy")

  // Relations for regular Letters (if you have them)
  created_letters Letter[] @relation("LetterCreatedBy")
  approved_letters Letter[] @relation("LetterApprovedBy")

  @@map("admin_users")
}

model Letter {
  id            String   @id @default(cuid())
  letter_number String   @unique
  title         String
  subject       String
  content       String
  type          String   // 'incoming' | 'outgoing'
  sender        String
  recipient     String
  status        String
  created_by    String
  approved_by   String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relations
  creator   AdminUser  @relation("LetterCreatedBy", fields: [created_by], references: [id])
  approver  AdminUser? @relation("LetterApprovedBy", fields: [approved_by], references: [id])

  @@map("letters")
}

model PermissionLetter {
  id            String   @id @default(cuid())
  letter_number String   @unique
  date          DateTime
  time_start    String
  time_end      String
  location      String
  activity      String
  letter_type   String   // dispensasi, keterangan, surat_tugas, lomba
  reason        String?
  status        String   @default("pending") // pending, approved, rejected
  created_by    String
  approved_by   String?
  approved_at   DateTime?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relations
  creator      AdminUser @relation("PermissionCreatedBy", fields: [created_by], references: [id])
  approver     AdminUser? @relation("PermissionApprovedBy", fields: [approved_by], references: [id])
  participants PermissionParticipant[]

  @@map("permission_letters")
}

model PermissionParticipant {
  id                   String           @id @default(cuid())
  permission_letter_id String
  name                 String
  class                String
  created_at           DateTime         @default(now())

  permission_letter PermissionLetter @relation(fields: [permission_letter_id], references: [id], onDelete: Cascade)

  @@map("permission_participants")
}